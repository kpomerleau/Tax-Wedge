taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
options(scipen=999) #Get's rid of scientific notation, which is useless in the context of dollars
plot(income,marginaltaxrate, log = "x",
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Log Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
View(mat)
0.4149616-0.3948409
state<-1
children<-5
married<-0
hoh<-1 #This cannot be 1 if married is 1
income<-37000
stateparam<-StateParameters(state)
#########Chart Creation############
marginaltaxrate<-NULL
averagetaxrate<-NULL
taxbill<-NULL
income<-NULL
grossup<-NULL
b<-1
while (b < 500){
income[b]<-b*1000
grossup[b]<-FedEmployerPayroll(income[b],married)
taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
options(scipen=999) #Get's rid of scientific notation, which is useless in the context of dollars
plot(income,marginaltaxrate, log = "x",
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Log Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
View(mat)
0.4202829-0.4619628
0.4619628-0.3209475
fedtax$eitc_threshold[1+children]
fedtax$eitc_threshold[1+3]
fedtax$eitc_phaseout_single[1+3]
fedtax$eitc_max[1+3]
fedtax$eitc_maxincome_single[1+3]
TotalTaxBurden<-function(income, children, married, hoh){
#Step 1: Grab State
stateparam<-StateParameters(state)
#Step 2: State Taxable Income
#Place holder for states with deductability
federalincometax<-0
statetaxableincome<-StateTaxableIncome(income,children,married,hoh,federalincometax,stateparam)
#Step 3: State Income Tax
stateincometax<-StateIncomeTax(statetaxableincome,married,hoh,stateparam)
#Step 4: State EITC
#First need federal EITC:
eitc<-FedEITC(income,children,married)
stateeitc<-StateEITC(eitc,stateparam)
#Step 5: Personal Credit (if applicable)
personalcredit<-StatePersonalCredit(income,statetaxableincome,married,hoh,children,stateparam)
#Step 6: Total State Income Tax
#If the EITC is not Refundable, state income tax needs a 0 lower bound
if(stateparam$eitcrefund[1] == 1){
stateincometax<-stateincometax-personalcredit-stateeitc
} else {
stateincometax<-max(0,stateincometax-personalcredit-stateeitc)
}
#Step 7: Federal Taxable Income
taxableincome<-FedTaxableIncome(income, children, married, hoh, stateincometax)
#Step 8: Federal Income Tax
federalincometax<-FedIncomeTax(taxableincome,married,hoh)
#Step 9: Child Tax Credit
ctc<-FedCTC(income,children,married)
#Step 10: Federal Income Tax
federalincometax<-federalincometax-ctc-eitc
#Step 11: Accounting for deductability of federal income taxes
#If a state has federal deductability, a second round of calculations need to happen
#to adjust both federal and state taxable income
if(stateparam$feddeduct[1] == 1){
#state taxable income including federal tax payments
statetaxableincome<-StateTaxableIncome(income,children,married,hoh,federalincometax,stateparam)
#state income tax
stateincometax<-StateIncomeTax(statetaxableincome,married,hoh,stateparam)
#total state income tax. No need to recalculate personal credit or EITC. They have nothing to do
#with federal deductability
if(stateparam$eitcrefund[1] == 1){
stateincometax<-stateincometax-personalcredit-stateeitc
} else {
stateincometax<-max(0,stateincometax-personalcredit-stateeitc)
}
#Federal Taxable income after adjusted state income tax
taxableincome<-FedTaxableIncome(income, children, married, hoh, stateincometax)
#Federal Income tax after state adjustment
federalincometax<-FedIncomeTax(taxableincome,married,hoh)
#Fed Tax plus credits
federalincometax<-federalincometax-ctc-eitc
}
#Step 12: Employee Payroll Taxes
employeepayrolltax<-FedEmployeePayroll(income,married)
#Step 13: Employer Payroll Taxes
employerpayrolltax<-FedEmployerPayroll(income,married)
#Step 14: Total Tax Burden
taxburden<-stateincometax+federalincometax+employeepayrolltax+employerpayrolltax
return(eitc)
}
state<-1
children<-5
married<-0
hoh<-1 #This cannot be 1 if married is 1
income<-37000
stateparam<-StateParameters(state)
#########Chart Creation############
marginaltaxrate<-NULL
averagetaxrate<-NULL
taxbill<-NULL
income<-NULL
grossup<-NULL
b<-1
while (b < 500){
income[b]<-b*1000
grossup[b]<-FedEmployerPayroll(income[b],married)
taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
options(scipen=999) #Get's rid of scientific notation, which is useless in the context of dollars
plot(income,taxbill, log = "x",
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Log Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
mat<-NULL
mat<-cbind(income,marginaltaxrate,averagetaxrate,taxbill)
write.table(mat,sep=",",file="test.txt")
plot(income,taxbill,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Log Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
state<-1
children<-5
married<-0
hoh<-1 #This cannot be 1 if married is 1
income<-37000
stateparam<-StateParameters(state)
#########Chart Creation############
marginaltaxrate<-NULL
averagetaxrate<-NULL
taxbill<-NULL
income<-NULL
grossup<-NULL
b<-1
while (b < 500){
income[b]<-b*1000
grossup[b]<-FedEmployerPayroll(income[b],married)
taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
options(scipen=999) #Get's rid of scientific notation, which is useless in the context of dollars
plot(income,taxbill,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Log Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
mat<-NULL
mat<-cbind(income,marginaltaxrate,averagetaxrate,taxbill)
View(mat)
TotalTaxBurden<-function(income, children, married, hoh){
#Step 1: Grab State
stateparam<-StateParameters(state)
#Step 2: State Taxable Income
#Place holder for states with deductability
federalincometax<-0
statetaxableincome<-StateTaxableIncome(income,children,married,hoh,federalincometax,stateparam)
#Step 3: State Income Tax
stateincometax<-StateIncomeTax(statetaxableincome,married,hoh,stateparam)
#Step 4: State EITC
#First need federal EITC:
eitc<-FedEITC(income,children,married)
stateeitc<-StateEITC(eitc,stateparam)
#Step 5: Personal Credit (if applicable)
personalcredit<-StatePersonalCredit(income,statetaxableincome,married,hoh,children,stateparam)
#Step 6: Total State Income Tax
#If the EITC is not Refundable, state income tax needs a 0 lower bound
if(stateparam$eitcrefund[1] == 1){
stateincometax<-stateincometax-personalcredit-stateeitc
} else {
stateincometax<-max(0,stateincometax-personalcredit-stateeitc)
}
#Step 7: Federal Taxable Income
taxableincome<-FedTaxableIncome(income, children, married, hoh, stateincometax)
#Step 8: Federal Income Tax
federalincometax<-FedIncomeTax(taxableincome,married,hoh)
#Step 9: Child Tax Credit
ctc<-FedCTC(income,children,married)
#Step 10: Federal Income Tax
federalincometax<-federalincometax-ctc-eitc
#Step 11: Accounting for deductability of federal income taxes
#If a state has federal deductability, a second round of calculations need to happen
#to adjust both federal and state taxable income
if(stateparam$feddeduct[1] == 1){
#state taxable income including federal tax payments
statetaxableincome<-StateTaxableIncome(income,children,married,hoh,federalincometax,stateparam)
#state income tax
stateincometax<-StateIncomeTax(statetaxableincome,married,hoh,stateparam)
#total state income tax. No need to recalculate personal credit or EITC. They have nothing to do
#with federal deductability
if(stateparam$eitcrefund[1] == 1){
stateincometax<-stateincometax-personalcredit-stateeitc
} else {
stateincometax<-max(0,stateincometax-personalcredit-stateeitc)
}
#Federal Taxable income after adjusted state income tax
taxableincome<-FedTaxableIncome(income, children, married, hoh, stateincometax)
#Federal Income tax after state adjustment
federalincometax<-FedIncomeTax(taxableincome,married,hoh)
#Fed Tax plus credits
federalincometax<-federalincometax-ctc-eitc
}
#Step 12: Employee Payroll Taxes
employeepayrolltax<-FedEmployeePayroll(income,married)
#Step 13: Employer Payroll Taxes
employerpayrolltax<-FedEmployerPayroll(income,married)
#Step 14: Total Tax Burden
taxburden<-stateincometax+federalincometax+employeepayrolltax+employerpayrolltax
return(taxburden)
}
marginaltaxrate<-NULL
averagetaxrate<-NULL
taxbill<-NULL
income<-NULL
grossup<-NULL
b<-1
while (b < 500){
income[b]<-b*100
grossup[b]<-FedEmployerPayroll(income[b],married)
taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
options(scipen=999) #Get's rid of scientific notation, which is useless in the context of dollars
plot(income,taxbill,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Log Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
mat<-NULL
mat<-cbind(income,marginaltaxrate,averagetaxrate,taxbill)
write.table(mat,sep=",",file="test.txt")
View(mat)
plot(income,taxbill,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Income", ylab="Marginal Tax Rate",
#xaxt = 'n',
ylim = c(-.2,.6))
plot(income,marginaltaxrate,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Income", ylab="Marginal Tax Rate",
#xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
plot(income,marginaltaxrate,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(-.2,.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
plot(income,marginaltaxrate,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(min(marginaltaxrate)),.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
plot(income,marginaltaxrate,
main=paste("Marginal Tax Rate by Income Level,",toString(stateparam$stateName[1])),
xlab="Income", ylab="Marginal Tax Rate",
xaxt = 'n',
ylim = c(min(marginaltaxrate),.6))
axis(1, at=axTicks(1), labels=sprintf("$%s", axTicks(1)),cex.axis=.75)
View(mat)
(4700-2000)/9500)
((4700-2000)/9500)
income<-25000
max(2000,4700-((income-20500)*((4700-2000)/9500)))
View(mat)
View(statetax)
state<-2
children<-0
married<-0
hoh<-0 #This cannot be 1 if married is 1
income<-37000
stateparam<-StateParameters(state)
#########Chart Creation############
marginaltaxrate<-NULL
averagetaxrate<-NULL
taxbill<-NULL
income<-NULL
grossup<-NULL
b<-1
while (b < 500){
income[b]<-b*100
grossup[b]<-FedEmployerPayroll(income[b],married)
taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
state<-2
stateparam<-StateParameters(state)
View(stateparam)
marginaltaxrate<-NULL
averagetaxrate<-NULL
taxbill<-NULL
income<-NULL
grossup<-NULL
b<-1
while (b < 500){
income[b]<-b*100
grossup[b]<-FedEmployerPayroll(income[b],married)
taxbill[b]<-TotalTaxBurden(income[b],children,married,hoh)
marginaltaxrate[b]<-(TotalTaxBurden(income[b],children,married,hoh)-TotalTaxBurden(income[b]-1,children,married,hoh))/(1+(FedEmployerPayroll(income[b],married)-FedEmployerPayroll(income[b]-1,married)))
averagetaxrate[b]<-TotalTaxBurden(income[b],children,married,hoh)/(income[b]+grossup[b])
b<-b+1
}
income<-30000
if(married == 1){
standarddeduction <- stateparam$deductionmarried[1]
} else if(married == 0){
standarddeduction <- stateparam$deductionsingle[1]
}
#Special state specific adjustments to the standard deduction
#Alabama
#Alabama's Standard Deduction is on a sliding scale between $2500 and $2000
#($7500 and $4000 married) between $20500 and $30,000.
if(stateparam$stateName[1] == "Alabama" & income >= 20500){
if(married == 0){
standarddeduction <- max(2000,2500-((income-20500)*((2500-2000)/9500)))
} else if (married == 1){
standarddeduction <- max(4000,7500-((income-20500)*((7500-4000)/9500)))
} else if (hoh == 1){
standarddeduction <- max(2000,4700-((income-20500)*((4700-2000)/9500)))
}
}
#Personal Exemption
#For taxpayer and spouse
if(married == 1){
personalexemption <- stateparam$personalexemptionmarried[1]
} else if (married == 0){
personalexemption <- stateparam$personalexemptionsingle[1]
} else if (hoh == 1){
personalexemption <- stateparam$personalexemptionhoh[1]
}
#Dependent Exemption
dependentexemption <- ( stateparam$personalexemptiondependent[1] * children )
#State specific adjustments to the personal exemption
#Alabama
if(stateparam$stateName[1] == "Alabama"){
if(income > 20000 & income <= 100000){
dependentexemption <- 500
} else if (income>100000){
dependentexemption <- 300
}
}
#Final Calculation of personal exemption
personalexemption <- personalexemption+dependentexemption
#Federal Income Tax Deduction (For Specific States)
#none yet
#Final Calculation
statetaxableincome<-max(0,income-standarddeduction-personalexemption-federalincometax)
federalincometax<-0
if(married == 1){
standarddeduction <- stateparam$deductionmarried[1]
} else if(married == 0){
standarddeduction <- stateparam$deductionsingle[1]
}
#Special state specific adjustments to the standard deduction
#Alabama
#Alabama's Standard Deduction is on a sliding scale between $2500 and $2000
#($7500 and $4000 married) between $20500 and $30,000.
if(stateparam$stateName[1] == "Alabama" & income >= 20500){
if(married == 0){
standarddeduction <- max(2000,2500-((income-20500)*((2500-2000)/9500)))
} else if (married == 1){
standarddeduction <- max(4000,7500-((income-20500)*((7500-4000)/9500)))
} else if (hoh == 1){
standarddeduction <- max(2000,4700-((income-20500)*((4700-2000)/9500)))
}
}
#Personal Exemption
#For taxpayer and spouse
if(married == 1){
personalexemption <- stateparam$personalexemptionmarried[1]
} else if (married == 0){
personalexemption <- stateparam$personalexemptionsingle[1]
} else if (hoh == 1){
personalexemption <- stateparam$personalexemptionhoh[1]
}
#Dependent Exemption
dependentexemption <- ( stateparam$personalexemptiondependent[1] * children )
#State specific adjustments to the personal exemption
#Alabama
if(stateparam$stateName[1] == "Alabama"){
if(income > 20000 & income <= 100000){
dependentexemption <- 500
} else if (income>100000){
dependentexemption <- 300
}
}
#Final Calculation of personal exemption
personalexemption <- personalexemption+dependentexemption
#Federal Income Tax Deduction (For Specific States)
#none yet
#Final Calculation
statetaxableincome<-max(0,income-standarddeduction-personalexemption-federalincometax)
if( statetaxableincome < stateparam$singlebracket[x+1] & x < length(stateparam$singlebracket)){
stateincometax <- stateincometax + ( ( statetaxableincome - stateparam$singlebracket[x] ) * stateparam$singlerate[x] )
break
} else {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( stateparam$singlebracket[x+1] - stateparam$singlebracket[x] )
x<-x+1
}
if( x == length(stateparam$marriedbracket) ) {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( statetaxableincome - stateparam$singlebracket[x] )
break
}
x<-1
if( statetaxableincome < stateparam$singlebracket[x+1] & x < length(stateparam$singlebracket)){
stateincometax <- stateincometax + ( ( statetaxableincome - stateparam$singlebracket[x] ) * stateparam$singlerate[x] )
break
} else {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( stateparam$singlebracket[x+1] - stateparam$singlebracket[x] )
x<-x+1
}
if( x == length(stateparam$marriedbracket) ) {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( statetaxableincome - stateparam$singlebracket[x] )
break
}
while(TRUE){
if(married == 1){ #Calculates Income Pre-Credit income tax for married couples
if( statetaxableincome < stateparam$marriedbracket[x+1] & x < length(stateparam$marriedbracket)){
stateincometax <- stateincometax + ( ( statetaxableincome - stateparam$marriedbracket[x] ) * stateparam$marriedrate[x] )
break
} else {
stateincometax <- stateincometax + stateparam$marriedrate[x] * ( stateparam$marriedbracket[x+1] - stateparam$marriedbracket[x] )
x<-x+1
}
if( x == length(stateparam$marriedbracket) ) {
stateincometax <- stateincometax + stateparam$marriedrate[x] * ( statetaxableincome - stateparam$marriedbracket[x] )
break
}
} else if (married == 0) { #Calculates Pre-Credit income tax for singles
if( statetaxableincome < stateparam$singlebracket[x+1] & x < length(stateparam$singlebracket)){
stateincometax <- stateincometax + ( ( statetaxableincome - stateparam$singlebracket[x] ) * stateparam$singlerate[x] )
break
} else {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( stateparam$singlebracket[x+1] - stateparam$singlebracket[x] )
x<-x+1
}
if( x == length(stateparam$marriedbracket) ) {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( statetaxableincome - stateparam$singlebracket[x] )
break
}
}
}
x<-1
stateincometax<-0
while(TRUE){
if(married == 1){ #Calculates Income Pre-Credit income tax for married couples
if( statetaxableincome < stateparam$marriedbracket[x+1] & x < length(stateparam$marriedbracket)){
stateincometax <- stateincometax + ( ( statetaxableincome - stateparam$marriedbracket[x] ) * stateparam$marriedrate[x] )
break
} else {
stateincometax <- stateincometax + stateparam$marriedrate[x] * ( stateparam$marriedbracket[x+1] - stateparam$marriedbracket[x] )
x<-x+1
}
if( x == length(stateparam$marriedbracket) ) {
stateincometax <- stateincometax + stateparam$marriedrate[x] * ( statetaxableincome - stateparam$marriedbracket[x] )
break
}
} else if (married == 0) { #Calculates Pre-Credit income tax for singles
if( statetaxableincome < stateparam$singlebracket[x+1] & x < length(stateparam$singlebracket)){
stateincometax <- stateincometax + ( ( statetaxableincome - stateparam$singlebracket[x] ) * stateparam$singlerate[x] )
break
} else {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( stateparam$singlebracket[x+1] - stateparam$singlebracket[x] )
x<-x+1
}
if( x == length(stateparam$marriedbracket) ) {
stateincometax <- stateincometax + stateparam$singlerate[x] * ( statetaxableincome - stateparam$singlebracket[x] )
break
}
}
}
statetaxableincome < stateparam$singlebracket[x+1] & x < length(stateparam$singlebracket)
x == length(stateparam$marriedbracket)
x<-1
stateincometax<-0
statetaxableincome < stateparam$marriedbracket[x+1] & x < length(stateparam$marriedbracket)
x == length(stateparam$marriedbracket)
